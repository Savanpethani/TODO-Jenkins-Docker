pipeline {
  agent any
  environment {
    REGISTRY = "docker.io/spethan1"
    IMAGE    = "${REGISTRY}/todo-api"
    STAGING_IP  = '18.191.5.173'
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          bat """
            docker run --rm ^
              -e SONAR_HOST_URL=http://host.docker.internal:9000 ^
              -v %WORKSPACE%:/usr/src ^
            sonarsource/sonar-scanner-cli -Dsonar.login=%SONAR_TOKEN%
          """
        }
      }
    }

    stage('Install & Test') {
      steps {
        // use bat for Windows
        bat 'npm ci'
        bat 'npm test'
      }
    }
    stage('Build Docker Image') {
      steps {
        script { IMAGE_TAG = "${IMAGE}:${env.BUILD_NUMBER}" }
        bat "docker build -t ${IMAGE_TAG} ."
      }
    }
    stage('Push Docker Image') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-credentials',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          bat """
            echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
            docker push ${IMAGE_TAG}
            docker tag ${IMAGE_TAG} ${IMAGE}:latest
            docker push ${IMAGE}:latest
          """
        }
      }
    }

  stage('Deploy to Staging') {
  steps {
    withCredentials([sshUserPrivateKey(
      credentialsId: 'ec2-ssh',
      keyFileVariable: 'SSH_KEY_PATH',
      usernameVariable: 'SSH_USER'
    )]) {
      bat """
copy /Y "%SSH_KEY_PATH%" "%WORKSPACE%\\id_rsa_deploy"
icacls "%WORKSPACE%\\id_rsa_deploy" /inheritance:r
icacls "%WORKSPACE%\\id_rsa_deploy" /grant:r SYSTEM:R
ssh -o StrictHostKeyChecking=no -i "%WORKSPACE%\\id_rsa_deploy" %SSH_USER%@${env.STAGING_IP} "mkdir -p ~/todo-api && cd ~/todo-api && if [ -d .git ]; then git pull; else git clone https://github.com/Savanpethani/TODO-Jenkins-Docker.git .; fi && docker-compose -f docker-compose.staging.yml down --remove-orphans &&  docker-compose -f docker-compose.staging.yml pull && docker-compose -f docker-compose.staging.yml up -d"
"""
    }
  }
}



}
  post {
    always   { cleanWs() }
    success  { echo "✅ Pipeline succeeded!" }
    failure  { echo "❌ Pipeline failed." }
  }
}
