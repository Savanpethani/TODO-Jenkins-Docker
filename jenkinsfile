pipeline {
  agent any
  environment {
    REGISTRY = "docker.io/spethan1"
    IMAGE    = "${REGISTRY}/todo-api"
    STAGING_IP  = "18.191.5.173"
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          bat """
            docker run --rm ^
              -e SONAR_HOST_URL=http://host.docker.internal:9000 ^
              -v %WORKSPACE%:/usr/src ^
            sonarsource/sonar-scanner-cli -Dsonar.login=%SONAR_TOKEN%
          """
        }
      }
    }

    stage('Install & Test') {
      steps {
        // use bat for Windows
        bat 'npm ci'
        bat 'npm test'
      }
    }
    stage('Build Docker Image') {
      steps {
        script { IMAGE_TAG = "${IMAGE}:${env.BUILD_NUMBER}" }
        bat "docker build -t ${IMAGE_TAG} ."
      }
    }
    stage('Push Docker Image') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-credentials',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          bat """
            echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
            docker push ${IMAGE_TAG}
            docker tag ${IMAGE_TAG} ${IMAGE}:latest
            docker push ${IMAGE}:latest
          """
        }
      }
    }

    stage('Deploy to Staging') {
      steps {
        // Use the SSH Agent plugin to load the EC2 key
        sshagent (credentials: ['ec2-ssh']) {
          // Run remotely via SSH into your VM
          sh """
            ssh -o StrictHostKeyChecking=no ubuntu@${18.191.5.173} '
              cd ~/todo-api && \
              docker-compose -f docker-compose.staging.yml pull && \
              docker-compose -f docker-compose.staging.yml up -d
            '
          """
        }
      }
    }
  
  }
  post {
    always   { cleanWs() }
    success  { echo "✅ Pipeline succeeded!" }
    failure  { echo "❌ Pipeline failed." }
  }
}
